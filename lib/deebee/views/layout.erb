<!DOCTYPE html>
<head>
  <meta charset="utf-8">
  <title>Deebee</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box }

    body, input, textarea, button {
      font: 16px Lucida Grande;
    }

    body {
      padding: 3.5em 1em 1em;
    }

    a:hover, a:focus { text-decoration: none }

    ul { list-style: none }
    li { margin: 1em 0 }

    nav {
      padding: 1em;
      background: #fff;
      position: fixed;
      top: 0; right: 0; left: 0;
    }
    nav select {
      margin-right: 1em;
    }

    table {
      border-collapse: collapse;
    }
    table, table input, table textarea, table button {
      font-size: 11px;
    }

    td, th {
      border: 1px solid lightgrey;
      padding: 0;
    }
    th {
      padding: .2em .4em;
    }

    td.action { border: none }
    td.action a {
      padding-right: .6em;
      display: none;
    }
    tr[data-dirty] td.action a { display: block }

    td input,
    td textarea {
      padding: .4em .5em;
      margin: 0;
      border: 0;
      resize: none;
      height: 2em;
    }
    td textarea {
      overflow: hidden;
    }
    td textarea:focus {
      overflow: scroll;
      position: absolute;
      z-index: 10;
      width: 800px !important;
      height: 600px !important;
      max-width: none !important;
    }
  </style>
</head>
<body>
  <nav>
    <select onchange="location.href = '<%= url '/tables/' %>' + this.value">
      <option value="">Choose a table…</option>
      <% @tables.each do |table| %>
        <option <%= 'selected' if params[:table] == table.to_s %>><%= table %></option>
      <% end %>
    </select>

    <% if params[:table] %>
      <% if params[:page] && params[:page].to_i > 1 %>
        <a href="<%= url "/tables/#{params[:table]}/page/#{params[:page].to_i - 1}" %>">« Prev</a>
      <% else %>
        <a>« Prev</a>
      <% end %>

      <% if @records.size >= 500 %>
        <a href="<%= url "/tables/#{params[:table]}/page/#{(params[:page] || 1).to_i + 1}" %>">Next »</a>
      <% else %>
        <a>Next »</a>
      <% end %>

      <a href="javascript:syncAll()">Sync all</a>
    <% end %>
  </nav>
  <%= yield %>
  <script>
    NodeList.prototype.forEach = Array.prototype.forEach;

    var DATA_DIRTY = 'data-dirty',
        tableName;

    init = function() {
      var inputs, table;

      table = document.querySelectorAll('table');
      if (table.length < 1) { return }

      tableName = table[0].getAttribute('data-table');

      inputs = document.querySelectorAll('input, textarea');
      inputs.forEach(function(elem, i, array) {
        elem.addEventListener('change', function(e) {
          var element, cell, row;
          element = e.currentTarget;

          while (allParentsFound != true) {
            var allParentsFound = false;

            switch (element.nodeName) {
              case 'TD':
                cell = element;
                break;
              case 'TR':
                row = element;
                allParentsFound = true;
                break;
            }

            element = element.parentNode;
          }

          cell.setAttribute(DATA_DIRTY, '');
          row.setAttribute(DATA_DIRTY, '');
        });
      });
    }

    sync = function(id) {
      var data, dirtyCells, row, rowSelector, url, xhr;

      rowSelector = 'tr[data-id="' + id + '"]';
      row = document.querySelectorAll(rowSelector)[0];
      dirtyCells = document.querySelectorAll(rowSelector + ' td[' + DATA_DIRTY + ']');

      if (!row || dirtyCells.length < 1 ) { return }

      data = [];
      dirtyCells.forEach(function(elem, i, array) {
        var key, value;

        key = elem.getAttribute('data-key');
        value = elem.children[0].value;

        data.push('record[' + key + ']' + '=' + value);
      });

      xhr = new XMLHttpRequest;
      xhr.open('POST', '<%= url('/tables/') %>' + tableName + '/' + id);
      xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');
      xhr.onreadystatechange = function(e) {
        if (xhr.readyState == 4 && xhr.status == 200) {
          row.removeAttribute(DATA_DIRTY);
          dirtyCells.forEach(function(elem, i, array) {
            elem.removeAttribute(DATA_DIRTY);
          });
        }
      }

      xhr.send(data.join('&'));
    }

    syncAll = function() {
      var rows = document.querySelectorAll('tr[' + DATA_DIRTY + ']');
      if (rows.length < 1) { return }

      rows.forEach(function(elem, i, array) {
        var id = elem.getAttribute('data-id');
        sync(id);
      });
    }

    init();
  </script>
</body>
</html>
